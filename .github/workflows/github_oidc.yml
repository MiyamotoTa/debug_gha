name: GitHubActions OpenIDConnect Example
on: [push, workflow_dispatch]

jobs:
  get_ip_addresses:
    runs-on: ubuntu-latest
    outputs:
      ip_addresses: ${{steps.get_ip_addresses.outputs.ip_addresses}}
    permissions:
      id-token: write
      contents: read
    steps:
      - run: sleep 5 # there's still a race condition for now

      - name: Configure AWS
        run: |
          export AWS_ROLE_ARN=arn:aws:iam::268265666456:role/ExampleGithubRole
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=ap-northeast-1

          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sigstore" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

      - name: Get IP addresses
        id: get_ip_addresses
        run: |
          IP_ADDRESSES=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=GitHubActons OIDC Example*" --query "Reservations[].Instances[].PublicIpAddress" | jq -c)
          echo "::set-output name=ip_addresses::IP_ADDRESSES"

  echo_ip_addresses:
    needs: get_ip_addresses
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ip_addresses: ${{fromJson(needs.get_ip_addresses.outputs.ip_addresses)}}
    steps:
      - run: ${{matrix.ip_addresses}}
